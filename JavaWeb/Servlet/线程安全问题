1.Servlet是在单实例多线程环境下运行的

2.什么时候程序存在线程安全问题？
   -多线程并发
   -有共享的数据
   -共享数据有修改操作
   
3.在JVM中，哪些数据可能会存在线程安全问题?
    -局部变量内存空间不共享，一个线程一个栈，局部变量不会存在线程安全问题。
    -常量不会被修改，所以常量不存在线程安全问题。
    -所有线程共享一个堆
        *new出来的对象在堆内存中存储，对象内部有“实例变量”，所以“实例变量”的内存多线程是共享的
         实例变量多线程共同访问，并且涉及到修改操作的时候就会存在线程安全问题
    -所有线程共享一个方法区
        *方法区有静态变量，静态变量的内存也是共享，若涉及到修改操作，静态变量也存在线程安全问题。
               
4.线程安全问题不只存在于JVM中，还有可能发生在数据库中，如多个线程共享同一张表，并且同时去修改表中的一些记录。那么这些记录就存在线程安全问题
  怎样解决数据库中线程安全问题，至少有两种方案：
      -第一种方案是：在Java程序中使用synchronized关键字，线程排队执行，自然不会在表中并发，以此解决线程安全问题。
      -第二种方案：行级锁（悲观锁）
      -第三种方案：事务隔离级别，如串行化
      -第四种方案：乐观锁
     
5.怎么解决线程安全问题？
   5.1不使用实例变量，尽量使用局部变量
   5.2若必须使用实力变量，可以把对象变成多例对象，一个线程一个java对象，实例变量的内存也并不会共享
   5.3若必须使用单例，则使用synchronized（线程同步机制），线程一旦排队执行，则吞吐量降低，降低用户体验
   
6.Servlet怎么解决线程安全问题？
   6.1不使用实例变量，尽量使用局部变量
   6.2Servlet必须是单例的，则这种方式只能考虑使用synchronized线程同步机制

   
        
