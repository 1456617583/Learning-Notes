装饰模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。
装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。
其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。


　　●　　抽象构件(Component)角色：给出一个抽象接口，以规范准备接收附加责任的对象。
　　●　　具体构件(ConcreteComponent)角色：定义一个将要接收附加责任的类。
　　●　　装饰(Decorator)角色：持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。
　　●　　具体装饰(ConcreteDecorator)角色：负责给构件对象“贴上”附加的责任。
  
  
  抽象构件角色
public interface Component {

	public void sampleOperation();

}

具体构件角色

public class ConcreteComponent implements Component {

	@Override
	public void sampleOperation() {
		// 写相关的业务代码
	}

}　

装饰角色

public class Decorator implements Component {
	private Component component;

	public Decorator(Component component) {
		this.component = component;
	}

	@Override
	public void sampleOperation() {
		// 委派给构件
		component.sampleOperation();
	}

}　　

具体装饰角色

public class ConcreteDecoratorA extends Decorator {

	public ConcreteDecoratorA(Component component) {
		super(component);
	}

	@Override
    public void sampleOperation() {
　　　　　super.sampleOperation();
        // 写相关的业务代码
    }
}

public class ConcreteDecoratorB extends Decorator {

	public ConcreteDecoratorB(Component component) {
		super(component);
	}

	@Override
    public void sampleOperation() {
　　　　  super.sampleOperation();
        // 写相关的业务代码
    }
}

齐天大圣的例子 孙悟空有七十二般变化，他的每一种变化都给他带来一种附加的本领。他变成鱼儿时，就可以到水里游泳；他变成鸟儿时，就可以在天上飞行。

	本例中，Component的角色便由鼎鼎大名的齐天大圣扮演；ConcreteComponent的角色属于大圣的本尊，就是猢狲本人；Decorator的角色由大圣的七十二变扮演。
  而ConcreteDecorator的角色便是鱼儿、鸟儿等七十二般变化。

	抽象构件角色“齐天大圣”

	接口定义了一个move()方法，这是所有的具体构件类和装饰类必须实现的。



// 大圣的尊号
	public interface TheGreatestSage {

		public void move();
	}
  
  具体构件角色“大圣本尊”猢狲类
	public class Monkey implements TheGreatestSage {

		@Override
		public void move() {
			// 代码
			System.out.println("Monkey Move");
		}

	}
  
  抽象装饰角色“七十二变”
	public class Change implements TheGreatestSage {
		private TheGreatestSage sage;

		public Change(TheGreatestSage sage) {
			this.sage = sage;
		}

		@Override
		public void move() {
			// 代码
			sage.move();
		}

	}
  
  具体装饰角色“鱼儿”
	public class Fish extends Change {

		public Fish(TheGreatestSage sage) {
			super(sage);
		}

		@Override
		public void move() {
			// 代码
			System.out.println("Fish Move");
		}
	}具体装饰角色“鸟儿”

	public class Bird extends Change {

		public Bird(TheGreatestSage sage) {
			super(sage);
		}

		@Override
		public void move() {
			// 代码
			System.out.println("Bird Move");
		}
	}
  
  客户端类
	public class Client {

		public static void main(String[] args) {
			TheGreatestSage sage = new Monkey();
			// 第一种写法
			TheGreatestSage bird = new Bird(sage);
			TheGreatestSage fish = new Fish(bird);
			// 第二种写法
			// TheGreatestSage fish = new Fish(new Bird(sage));
			fish.move();
		}

}
“大圣本尊”是ConcreteComponent类，而“鸟儿”、“鱼儿”是装饰类。要装饰的是“大圣本尊”，也即“猢狲”实例。

上面的例子中，系统把大圣从一只猢狲装饰成了一只鸟儿（把鸟儿的功能加到了猢狲身上），然后又把鸟儿装饰成了一条鱼儿（把鱼儿的功能加到了猢狲+鸟儿身上，得到了猢狲+鸟儿+鱼儿）。


装饰模式的优点
　　（1）装饰模式与继承关系的目的都是要扩展对象的功能，但是装饰模式可以提供比继承更多的灵活性。
         装饰模式允许系统动态决定“贴上”一个需要的“装饰”，或者除掉一个不需要的“装饰”。继承关系则不同，继承关系是静态的，它在系统运行前就决定了。
　　（2）通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。

装饰模式的缺点
　　由于使用装饰模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。
    但是，在另一方面，使用装饰模式会产生比使用继承关系更多的对象。更多的对象会使得查错变得困难，特别是这些对象看上去都很相像。

 总结：
    1.装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。
    2.装饰模式包含四个角色：抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；具体构件定义了具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）； 
      抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。
    3.使用装饰模式来实现扩展比继承更加灵活，它以对客户透明的方式动 态地给一个对象附加更多的责任。装饰模式可以在不需要创造更多子 类的情况下，将对象的功能加以扩展。
    4.装饰模式的主要优点在于可以提供比继承更多的灵活性，可以通过一种动态的 方式来扩展一个对象的功能，并通过使用不同的具体装饰类以及这些装饰类的 排列组合，可以创造出很多不同行为的组合，而且具体构件类与具体装饰类可以独立变化，
      用户可以根据需要增加新的具体构件类和具体装饰类；其主要缺点在于使用装饰模式进行系统设计时将产生很多小对象，而且装饰模式比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。
    5.装饰模式适用情况包括：在不影响其他对象的情况下，以动态、透明的方式给 单个对象添加职责；需要动态地给一个对象增加功能，这些功能也可以动态地 被撤销；当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展 和维护时。
    6.装饰模式可分为透明装饰模式和半透明装饰模式：在透明装饰模式中，要求客 户端完全针对抽象编程，装饰模式的透明性要求客户端程序不应该声明具体构 件类型和具体装饰类型，而应该全部声明为抽象构件类型；
      半透明装饰模式允 许用户在客户端声明具体装饰者类型的对象，调用在具体装饰者中新增的方法。
