  *在软件开发中采用类似于电源适配器的设计和编码技巧被称为适配器模式。
  *通常情况下，客户端可以通过目标类的接口访问它所提供的服务。有时，现有的类可以满足客户类的功能需要，
   但是它所提供的接口不一定是客户类所期望的，这可能是因为现有类中方法名与目标类中定义的方法名不一致等原因所导致的。
  *在这种情况下，现有的接口需要转化为客户类期望的接口，这样保证了对现有类的重用。
   如果不进行这样的转化，客户类就不能利用现有类所提供的功能，适配器模式可以完成这样的转化。
  *在适配器模式中可以定义一个包装类，包装不兼容接口的对象，这个包装类指的就是适配器(Adapter)，它所包装的对象就是适配者(Adaptee)，即被适配的类。
  *适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。
   也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。
   因此，适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机。
   
   
   适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。其别名为包装器(Wrapper)。
   适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。
   
   用电器做例子，笔记本电脑的插头一般都是三相的，即除了阳极、阴极外，还有一个地极。而有些地方的电源插座却只有两极，没有地极。
   电源插座与笔记本电脑的电源插头不匹配使得笔记本电脑无法使用。这时候一个三相到两相的转换器（适配器）就能解决此问题，而这正像是本模式所做的事情。
   
    
   类适配器模式
   
     ●目标(Target)角色：这就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。
     ●源(Adapee)角色：现在需要适配的接口。
     ●适配器(Adaper)角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是具体类。
    
          public interface Target {
          /**
           * 这是源类Adaptee也有的方法
           */
          public void sampleOperation1(); 
          /**
           * 这是源类Adapteee没有的方法
           */
          public void sampleOperation2(); 
      }

　　上面给出的是目标角色的源代码，这个角色是以一个JAVA接口的形式实现的。可以看出，这个接口声明了两个方法：sampleOperation1()和sampleOperation2()。
    而源角色Adaptee是一个具体类，它有一个sampleOperation1()方法，但是没有sampleOperation2()方法。


        public class Adaptee {
    
            public void sampleOperation1(){}

        }

　　适配器角色Adapter扩展了Adaptee,同时又实现了目标(Target)接口。
    由于Adaptee没有提供sampleOperation2()方法，而目标接口又要求这个方法，因此适配器角色Adapter实现了这个方法。


        public class Adapter extends Adaptee implements Target {
            /**
             * 由于源类Adaptee没有方法sampleOperation2()
             * 因此适配器补充上这个方法
             */
            @Override
            public void sampleOperation2() {
             //写相关的代码
            }

        }
        
        
        
        
        
        
        
  对象适配器模式
  
　　与类的适配器模式一样，对象的适配器模式把被适配的类的API转换成为目标类的API，
    与类的适配器模式不同的是，对象的适配器模式不是使用继承关系连接到Adaptee类，而是使用委派关系连接到Adaptee类。
    Adaptee类并没有sampleOperation2()方法，而客户端则期待这个方法。为使客户端能够使用Adaptee类，需要提供一个包装(Wrapper)类Adapter。
    这个包装类包装了一个Adaptee的实例，从而此包装类能够把Adaptee的API与Target类的API衔接起来。Adapter与Adaptee是委派关系，这决定了适配器模式是对象的。


       public interface Target {
           /**
            * 这是源类Adaptee也有的方法
            */
           public void sampleOperation1(); 
           /**
            * 这是源类Adapteee没有的方法
            */
           public void sampleOperation2(); 
       }

       public class Adaptee {

           public void sampleOperation1(){}
    
       }

       public class Adapter {
           private Adaptee adaptee;
    
           public Adapter(Adaptee adaptee){
               this.adaptee = adaptee;
           }
           /**
            * 源类Adaptee有方法sampleOperation1
            * 因此适配器类直接委派即可
            */
       public void sampleOperation1(){
               this.adaptee.sampleOperation1();
           }
            /**       
            * 源类Adaptee没有方法sampleOperation2
            * 因此由适配器类需要补充此方法
            */
       public  void sampleOperation2(){
               //写相关的代码
           }
     }
   
   类适配器和对象适配器的权衡

　　●　　类适配器使用对象继承的方式，是静态的定义方式；而对象适配器使用对象组合的方式，是动态组合的方式。

　　●　　对于类适配器，由于适配器直接继承了Adaptee，使得适配器不能和Adaptee的子类一起工作，因为继承是静态的关系，当适配器继承了Adaptee后，就不可能再去处理  Adaptee的子类了。

　　　　 对于对象适配器，一个适配器可以把多种不同的源适配到同一个目标。
     换言之，同一个适配器可以把源类和它的子类都适配到目标接口。因为对象适配器采用的是对象组合的关系，只要对象类型正确，是不是子类都无所谓。

　　●　  对于类适配器，适配器可以重定义Adaptee的部分行为，相当于子类覆盖父类的部分实现方法。

　　　　 对于对象适配器，要重定义Adaptee的行为比较困难，这种情况下，需要定义Adaptee的子类来实现重定义，然后让适配器组合子类。
     虽然重定义Adaptee的行为比较困难，但是想要增加一些新的行为则方便的很，而且新增加的行为可同时适用于所有的源。

　　●　　对于类适配器，仅仅引入了一个对象，并不需要额外的引用来间接得到Adaptee。

　　　　 对于对象适配器，需要额外的引用来间接得到Adaptee。

　　建议尽量使用对象适配器的实现方式，多用合成/聚合、少用继承。当然，具体问题具体分析，根据需要来选用实现方式，最适合的才是最好的。

适配器模式的优点
　　更好的复用性
　　系统需要使用现有的类，而此类的接口不符合系统的需要。那么通过适配器模式就可以让这些功能得到更好的复用。

　　更好的扩展性
　　在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。

适配器模式的缺点
　　过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构
